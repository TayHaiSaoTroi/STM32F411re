
STM32F411re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000490  08000498  00001498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000490  08000490  00001498  2**0
                  CONTENTS
  4 .ARM          00000000  08000490  08000490  00001498  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000490  08000498  00001498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000490  08000490  00001490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000494  08000494  00001494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000498  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000498  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000080f  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000319  00000000  00000000  00001cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000128  00000000  00000000  00001ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000cc  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022f1  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001552  00000000  00000000  000044d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000084d8  00000000  00000000  00005a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000deff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000354  00000000  00000000  0000df44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0000e298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000478 	.word	0x08000478

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000478 	.word	0x08000478

080001d8 <GPIO_INIT>:

#include <HAL_STM32F411_GPIO.h>


void GPIO_INIT(GPIO_t *GPIOx, GPIO_Config_t *GPIO_Config)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
    // 1. Cấu hình chế độ (Input, Output, Alternate, Analog)
    GPIOx->MODER &= ~(0x3U << (GPIO_Config->PinNumber * 2)); // Xóa các bit hiện tại
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681a      	ldr	r2, [r3, #0]
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	2103      	movs	r1, #3
 80001ee:	fa01 f303 	lsl.w	r3, r1, r3
 80001f2:	43db      	mvns	r3, r3
 80001f4:	401a      	ands	r2, r3
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	601a      	str	r2, [r3, #0]
    GPIOx->MODER |= (GPIO_Config->Mode << (GPIO_Config->PinNumber * 2)); // Đặt chế độ mới
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	683a      	ldr	r2, [r7, #0]
 8000200:	7852      	ldrb	r2, [r2, #1]
 8000202:	4611      	mov	r1, r2
 8000204:	683a      	ldr	r2, [r7, #0]
 8000206:	7812      	ldrb	r2, [r2, #0]
 8000208:	0052      	lsls	r2, r2, #1
 800020a:	fa01 f202 	lsl.w	r2, r1, r2
 800020e:	431a      	orrs	r2, r3
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	601a      	str	r2, [r3, #0]

    // 2. Cấu hình Output type (Push-pull hoặc Open-drain)
    GPIOx->OTYPER &= ~(0x1U << GPIO_Config->PinNumber); // Xóa bit hiện tại
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	685a      	ldr	r2, [r3, #4]
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	4619      	mov	r1, r3
 800021e:	2301      	movs	r3, #1
 8000220:	408b      	lsls	r3, r1
 8000222:	43db      	mvns	r3, r3
 8000224:	401a      	ands	r2, r3
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	605a      	str	r2, [r3, #4]
    GPIOx->OTYPER |= (GPIO_Config->Otype << GPIO_Config->PinNumber); // Đặt kiểu mới
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	685b      	ldr	r3, [r3, #4]
 800022e:	683a      	ldr	r2, [r7, #0]
 8000230:	7912      	ldrb	r2, [r2, #4]
 8000232:	4611      	mov	r1, r2
 8000234:	683a      	ldr	r2, [r7, #0]
 8000236:	7812      	ldrb	r2, [r2, #0]
 8000238:	fa01 f202 	lsl.w	r2, r1, r2
 800023c:	431a      	orrs	r2, r3
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	605a      	str	r2, [r3, #4]

    // 3. Cấu hình tốc độ (Low, Medium, Fast, High)
    GPIOx->OSPEEDR &= ~(0x3U << (GPIO_Config->PinNumber * 2)); // Xóa các bit hiện tại
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	689a      	ldr	r2, [r3, #8]
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	005b      	lsls	r3, r3, #1
 800024c:	2103      	movs	r1, #3
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
 8000252:	43db      	mvns	r3, r3
 8000254:	401a      	ands	r2, r3
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	609a      	str	r2, [r3, #8]
    GPIOx->OSPEEDR |= (GPIO_Config->Speed << (GPIO_Config->PinNumber * 2)); // Đặt tốc độ mới
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	683a      	ldr	r2, [r7, #0]
 8000260:	7892      	ldrb	r2, [r2, #2]
 8000262:	4611      	mov	r1, r2
 8000264:	683a      	ldr	r2, [r7, #0]
 8000266:	7812      	ldrb	r2, [r2, #0]
 8000268:	0052      	lsls	r2, r2, #1
 800026a:	fa01 f202 	lsl.w	r2, r1, r2
 800026e:	431a      	orrs	r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	609a      	str	r2, [r3, #8]

    // 4. Cấu hình Pull-up / Pull-down
    GPIOx->PUPDR &= ~(0x3U << (GPIO_Config->PinNumber * 2)); // Xóa các bit hiện tại
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	68da      	ldr	r2, [r3, #12]
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	005b      	lsls	r3, r3, #1
 800027e:	2103      	movs	r1, #3
 8000280:	fa01 f303 	lsl.w	r3, r1, r3
 8000284:	43db      	mvns	r3, r3
 8000286:	401a      	ands	r2, r3
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	60da      	str	r2, [r3, #12]
    GPIOx->PUPDR |= (GPIO_Config->Pull_up_down << (GPIO_Config->PinNumber * 2)); // Đặt giá trị mới
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	683a      	ldr	r2, [r7, #0]
 8000292:	78d2      	ldrb	r2, [r2, #3]
 8000294:	4611      	mov	r1, r2
 8000296:	683a      	ldr	r2, [r7, #0]
 8000298:	7812      	ldrb	r2, [r2, #0]
 800029a:	0052      	lsls	r2, r2, #1
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	431a      	orrs	r2, r3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60da      	str	r2, [r3, #12]

    // 5. Cấu hình chức năng Alternate Function (nếu cần)
    if (GPIO_Config->Mode == 2) // Alternate function mode
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	785b      	ldrb	r3, [r3, #1]
 80002aa:	2b02      	cmp	r3, #2
 80002ac:	d138      	bne.n	8000320 <GPIO_INIT+0x148>
    {
        if (GPIO_Config->PinNumber < 8)
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b07      	cmp	r3, #7
 80002b4:	d819      	bhi.n	80002ea <GPIO_INIT+0x112>
        {
            GPIOx->AFR[0] &= ~(0xFU << (GPIO_Config->PinNumber * 4)); // Xóa bit hiện tại
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	6a1a      	ldr	r2, [r3, #32]
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	210f      	movs	r1, #15
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43db      	mvns	r3, r3
 80002c8:	401a      	ands	r2, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	621a      	str	r2, [r3, #32]
            GPIOx->AFR[0] |= (GPIO_Config->AltMode << (GPIO_Config->PinNumber * 4)); // Đặt chức năng thay thế
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	6a1b      	ldr	r3, [r3, #32]
 80002d2:	683a      	ldr	r2, [r7, #0]
 80002d4:	7952      	ldrb	r2, [r2, #5]
 80002d6:	4611      	mov	r1, r2
 80002d8:	683a      	ldr	r2, [r7, #0]
 80002da:	7812      	ldrb	r2, [r2, #0]
 80002dc:	0092      	lsls	r2, r2, #2
 80002de:	fa01 f202 	lsl.w	r2, r1, r2
 80002e2:	431a      	orrs	r2, r3
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	621a      	str	r2, [r3, #32]
        {
            GPIOx->AFR[1] &= ~(0xFU << ((GPIO_Config->PinNumber - 8) * 4)); // Xóa bit hiện tại
            GPIOx->AFR[1] |= (GPIO_Config->AltMode << ((GPIO_Config->PinNumber - 8) * 4)); // Đặt chức năng thay thế
        }
    }
}
 80002e8:	e01a      	b.n	8000320 <GPIO_INIT+0x148>
            GPIOx->AFR[1] &= ~(0xFU << ((GPIO_Config->PinNumber - 8) * 4)); // Xóa bit hiện tại
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	3b08      	subs	r3, #8
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	210f      	movs	r1, #15
 80002f8:	fa01 f303 	lsl.w	r3, r1, r3
 80002fc:	43db      	mvns	r3, r3
 80002fe:	401a      	ands	r2, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	625a      	str	r2, [r3, #36]	@ 0x24
            GPIOx->AFR[1] |= (GPIO_Config->AltMode << ((GPIO_Config->PinNumber - 8) * 4)); // Đặt chức năng thay thế
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000308:	683a      	ldr	r2, [r7, #0]
 800030a:	7952      	ldrb	r2, [r2, #5]
 800030c:	4611      	mov	r1, r2
 800030e:	683a      	ldr	r2, [r7, #0]
 8000310:	7812      	ldrb	r2, [r2, #0]
 8000312:	3a08      	subs	r2, #8
 8000314:	0092      	lsls	r2, r2, #2
 8000316:	fa01 f202 	lsl.w	r2, r1, r2
 800031a:	431a      	orrs	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000320:	bf00      	nop
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr

0800032c <GPIO_WritePin>:
	value = ((GPIOx->IDR >> PinNumber) &0x01);
	return value;
}

void GPIO_WritePin(GPIO_t *GPIOx, uint8 PinNumber, uint8 State)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	70fb      	strb	r3, [r7, #3]
 8000338:	4613      	mov	r3, r2
 800033a:	70bb      	strb	r3, [r7, #2]
	if(State==GPIO_PIN_SET)
 800033c:	78bb      	ldrb	r3, [r7, #2]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d109      	bne.n	8000356 <GPIO_WritePin+0x2a>
	{
		GPIOx->ODR |= (1<<PinNumber);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	78fa      	ldrb	r2, [r7, #3]
 8000348:	2101      	movs	r1, #1
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	431a      	orrs	r2, r3
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	615a      	str	r2, [r3, #20]
	else
	{
		GPIOx->ODR &=~ (1<<PinNumber);
	}

}
 8000354:	e009      	b.n	800036a <GPIO_WritePin+0x3e>
		GPIOx->ODR &=~ (1<<PinNumber);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	78fa      	ldrb	r2, [r7, #3]
 800035c:	2101      	movs	r1, #1
 800035e:	fa01 f202 	lsl.w	r2, r1, r2
 8000362:	43d2      	mvns	r2, r2
 8000364:	401a      	ands	r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	615a      	str	r2, [r3, #20]
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
	...

08000378 <HAL_GPIOA_ENABLE_CLOCK>:
#else
	HAL_RCC_SetSystemClockByPLL();
#endif
}
void HAL_GPIOA_ENABLE_CLOCK()
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_GPIOAENR;
 800037c:	4b05      	ldr	r3, [pc, #20]	@ (8000394 <HAL_GPIOA_ENABLE_CLOCK+0x1c>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000380:	4a04      	ldr	r2, [pc, #16]	@ (8000394 <HAL_GPIOA_ENABLE_CLOCK+0x1c>)
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40023800 	.word	0x40023800

08000398 <main>:
#include <stdio.h>
#include <stdint.h>


int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0

	HAL_GPIOA_ENABLE_CLOCK();
 800039e:	f7ff ffeb 	bl	8000378 <HAL_GPIOA_ENABLE_CLOCK>

	GPIO_Config_t pinConfig;
	pinConfig.PinNumber = GPIO_PIN_5;      // Sử dụng chân số 5
 80003a2:	2305      	movs	r3, #5
 80003a4:	703b      	strb	r3, [r7, #0]
	pinConfig.Mode = GPIO_OUTPUT;           // Output mode
 80003a6:	2301      	movs	r3, #1
 80003a8:	707b      	strb	r3, [r7, #1]
	pinConfig.Speed = HIGH_SPEED;          // High speed
 80003aa:	2303      	movs	r3, #3
 80003ac:	70bb      	strb	r3, [r7, #2]
	pinConfig.Pull_up_down = NO_PULL;   // No pull-up/pull-down
 80003ae:	2300      	movs	r3, #0
 80003b0:	70fb      	strb	r3, [r7, #3]
	pinConfig.Otype = OUPUT_PUSHPULL;          // Push-pull
 80003b2:	2300      	movs	r3, #0
 80003b4:	713b      	strb	r3, [r7, #4]
	pinConfig.AltMode = 0;        // Không dùng chế độ thay thế
 80003b6:	2300      	movs	r3, #0
 80003b8:	717b      	strb	r3, [r7, #5]

	GPIO_INIT(GPIOA, &pinConfig);
 80003ba:	463b      	mov	r3, r7
 80003bc:	4619      	mov	r1, r3
 80003be:	4806      	ldr	r0, [pc, #24]	@ (80003d8 <main+0x40>)
 80003c0:	f7ff ff0a 	bl	80001d8 <GPIO_INIT>

	GPIO_WritePin(GPIOA,GPIO_PIN_5, GPIO_PIN_SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	2105      	movs	r1, #5
 80003c8:	4803      	ldr	r0, [pc, #12]	@ (80003d8 <main+0x40>)
 80003ca:	f7ff ffaf 	bl	800032c <GPIO_WritePin>
 80003ce:	2300      	movs	r3, #0
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40020000 	.word	0x40020000

080003dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003dc:	480d      	ldr	r0, [pc, #52]	@ (8000414 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e4:	480c      	ldr	r0, [pc, #48]	@ (8000418 <LoopForever+0x6>)
  ldr r1, =_edata
 80003e6:	490d      	ldr	r1, [pc, #52]	@ (800041c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000420 <LoopForever+0xe>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ec:	e002      	b.n	80003f4 <LoopCopyDataInit>

080003ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f2:	3304      	adds	r3, #4

080003f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f8:	d3f9      	bcc.n	80003ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000428 <LoopForever+0x16>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000400:	e001      	b.n	8000406 <LoopFillZerobss>

08000402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000404:	3204      	adds	r2, #4

08000406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000408:	d3fb      	bcc.n	8000402 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800040a:	f000 f811 	bl	8000430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800040e:	f7ff ffc3 	bl	8000398 <main>

08000412 <LoopForever>:

LoopForever:
  b LoopForever
 8000412:	e7fe      	b.n	8000412 <LoopForever>
  ldr   r0, =_estack
 8000414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800041c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000420:	08000498 	.word	0x08000498
  ldr r2, =_sbss
 8000424:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000428:	2000001c 	.word	0x2000001c

0800042c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800042c:	e7fe      	b.n	800042c <ADC_IRQHandler>
	...

08000430 <__libc_init_array>:
 8000430:	b570      	push	{r4, r5, r6, lr}
 8000432:	4d0d      	ldr	r5, [pc, #52]	@ (8000468 <__libc_init_array+0x38>)
 8000434:	4c0d      	ldr	r4, [pc, #52]	@ (800046c <__libc_init_array+0x3c>)
 8000436:	1b64      	subs	r4, r4, r5
 8000438:	10a4      	asrs	r4, r4, #2
 800043a:	2600      	movs	r6, #0
 800043c:	42a6      	cmp	r6, r4
 800043e:	d109      	bne.n	8000454 <__libc_init_array+0x24>
 8000440:	4d0b      	ldr	r5, [pc, #44]	@ (8000470 <__libc_init_array+0x40>)
 8000442:	4c0c      	ldr	r4, [pc, #48]	@ (8000474 <__libc_init_array+0x44>)
 8000444:	f000 f818 	bl	8000478 <_init>
 8000448:	1b64      	subs	r4, r4, r5
 800044a:	10a4      	asrs	r4, r4, #2
 800044c:	2600      	movs	r6, #0
 800044e:	42a6      	cmp	r6, r4
 8000450:	d105      	bne.n	800045e <__libc_init_array+0x2e>
 8000452:	bd70      	pop	{r4, r5, r6, pc}
 8000454:	f855 3b04 	ldr.w	r3, [r5], #4
 8000458:	4798      	blx	r3
 800045a:	3601      	adds	r6, #1
 800045c:	e7ee      	b.n	800043c <__libc_init_array+0xc>
 800045e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000462:	4798      	blx	r3
 8000464:	3601      	adds	r6, #1
 8000466:	e7f2      	b.n	800044e <__libc_init_array+0x1e>
 8000468:	08000490 	.word	0x08000490
 800046c:	08000490 	.word	0x08000490
 8000470:	08000490 	.word	0x08000490
 8000474:	08000494 	.word	0x08000494

08000478 <_init>:
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	bf00      	nop
 800047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047e:	bc08      	pop	{r3}
 8000480:	469e      	mov	lr, r3
 8000482:	4770      	bx	lr

08000484 <_fini>:
 8000484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000486:	bf00      	nop
 8000488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048a:	bc08      	pop	{r3}
 800048c:	469e      	mov	lr, r3
 800048e:	4770      	bx	lr
